# Generated by Django 5.1 on 2024-08-30 03:40

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Control',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('control_short_number', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='Short Number')),
                ('description', models.TextField(verbose_name='Description')),
                ('tags', models.JSONField(help_text='List of tags related to the control.', verbose_name='Tags')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('In Review', 'In Review'), ('Approved', 'Approved'), ('Deprecated', 'Deprecated')], max_length=50, verbose_name='Status')),
                ('priority', models.PositiveSmallIntegerField(choices=[(1, 'High'), (2, 'Medium'), (3, 'Low')], help_text='Priority level', verbose_name='Priority')),
                ('selected', models.BooleanField(default=False, verbose_name='Selected')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('project_timeline_start', models.DateField(verbose_name='Project Timeline Start')),
                ('project_timeline_end', models.DateField(verbose_name='Project Timeline End')),
                ('responsible_team', models.CharField(max_length=255, verbose_name='Responsible Team')),
                ('exception_required', models.BooleanField(default=False, verbose_name='Exception Required')),
                ('exception_for', models.TextField(blank=True, null=True, verbose_name='Exception For')),
                ('exception_duration_start', models.DateField(blank=True, null=True, verbose_name='Exception Duration Start')),
                ('exception_duration_end', models.DateField(blank=True, null=True, verbose_name='Exception Duration End')),
                ('csf_function', models.CharField(choices=[('Identify', 'Identify'), ('Protect', 'Protect'), ('Detect', 'Detect'), ('Respond', 'Respond'), ('Recover', 'Recover')], help_text='NIST CSF core function this control supports.', max_length=50, verbose_name='CSF Function')),
                ('csf_category', models.CharField(help_text='NIST CSF category (e.g., ID.AM, PR.AC)', max_length=50, verbose_name='CSF Category')),
                ('responsible', models.CharField(choices=[('Securely Provision', 'Securely Provision'), ('Operate and Maintain', 'Operate and Maintain'), ('Oversee and Govern', 'Oversee and Govern'), ('Protect and Defend', 'Protect and Defend'), ('Analyze', 'Analyze'), ('Collect and Operate', 'Collect and Operate'), ('Investigate', 'Investigate')], help_text='Role responsible for the control.', max_length=50, verbose_name='Responsible Role')),
                ('accountable', models.CharField(choices=[('Securely Provision', 'Securely Provision'), ('Operate and Maintain', 'Operate and Maintain'), ('Oversee and Govern', 'Oversee and Govern'), ('Protect and Defend', 'Protect and Defend'), ('Analyze', 'Analyze'), ('Collect and Operate', 'Collect and Operate'), ('Investigate', 'Investigate')], help_text='Role accountable for the control.', max_length=50, verbose_name='Accountable Role')),
                ('consulted', models.CharField(choices=[('Securely Provision', 'Securely Provision'), ('Operate and Maintain', 'Operate and Maintain'), ('Oversee and Govern', 'Oversee and Govern'), ('Protect and Defend', 'Protect and Defend'), ('Analyze', 'Analyze'), ('Collect and Operate', 'Collect and Operate'), ('Investigate', 'Investigate')], help_text='Role consulted for the control.', max_length=50, verbose_name='Consulted Role')),
                ('informed', models.CharField(choices=[('Securely Provision', 'Securely Provision'), ('Operate and Maintain', 'Operate and Maintain'), ('Oversee and Govern', 'Oversee and Govern'), ('Protect and Defend', 'Protect and Defend'), ('Analyze', 'Analyze'), ('Collect and Operate', 'Collect and Operate'), ('Investigate', 'Investigate')], help_text='Role informed about the control.', max_length=50, verbose_name='Informed Role')),
                ('visibility', models.CharField(max_length=255, verbose_name='Visibility')),
                ('alerting', models.CharField(max_length=255, verbose_name='Alerting')),
                ('detection', models.CharField(max_length=255, verbose_name='Detection')),
                ('telemetry', models.CharField(max_length=255, verbose_name='Telemetry')),
                ('signals', models.CharField(max_length=255, verbose_name='Signals')),
                ('components', models.JSONField(help_text='List of components covered by this control.', verbose_name='Components')),
                ('span', models.CharField(help_text='The span of control (e.g., organization-wide, departmental)', max_length=255, verbose_name='Span')),
                ('metric', models.CharField(help_text='Metric used to measure control effectiveness', max_length=255, verbose_name='Metric')),
                ('report', models.TextField(help_text="Details on how the control's effectiveness is reported", verbose_name='Report')),
                ('discussion', models.TextField(verbose_name='Discussion')),
                ('files', models.FileField(blank=True, null=True, upload_to='control_files/', verbose_name='Files')),
                ('related_controls', models.ManyToManyField(blank=True, related_name='related_by', to='helix.control')),
                ('team_members', models.ManyToManyField(blank=True, related_name='control_team_members', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Control',
                'verbose_name_plural': 'Controls',
            },
        ),
        migrations.CreateModel(
            name='ControlFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='control_files/', verbose_name='File')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded At')),
                ('control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='control_files', to='helix.control')),
            ],
        ),
        migrations.CreateModel(
            name='ControlSubitem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subitem', models.JSONField(help_text='Structured subitem details', verbose_name='Subitem Details')),
                ('control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subitems', to='helix.control')),
            ],
        ),
        migrations.AddIndex(
            model_name='control',
            index=models.Index(fields=['control_short_number'], name='helix_contr_control_42ec55_idx'),
        ),
        migrations.AddIndex(
            model_name='control',
            index=models.Index(fields=['status'], name='helix_contr_status_8c4e5d_idx'),
        ),
        migrations.AddIndex(
            model_name='control',
            index=models.Index(fields=['priority'], name='helix_contr_priorit_3ae744_idx'),
        ),
        migrations.AddIndex(
            model_name='control',
            index=models.Index(fields=['last_updated'], name='helix_contr_last_up_085049_idx'),
        ),
    ]
